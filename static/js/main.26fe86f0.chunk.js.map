{"version":3,"sources":["components/common/ToggleProp/ToggleProp.module.css","components/Login/Login.module.css","components/Header/Header.jsx","components/Navbar/Navbar.jsx","components/common/ToggleProp/ToggleProp.jsx","api/api.js","reducers/tasksReducer.js","components/Main/TasksList/TasksList.jsx","components/Main/AddTask/AddTask.jsx","components/Main/AddTask/AddTaskContainer.jsx","components/Main/Main.jsx","components/ArchivedTasks/ArchivedTasks.jsx","components/ImportantTasks/ImportantTasks.jsx","components/Login/Login.jsx","reducers/usersReducer.js","components/Login/LoginContainer.jsx","App.js","serviceWorker.js","reducers/index.js","index.js","components/Main/TasksList/TasksList.module.css","components/ImportantTasks/ImportantTasks.module.css","components/Main/AddTask/AddTask.module.css","components/ArchivedTasks/ArchivedTasks.module.css","components/Header/Header.module.css","components/Navbar/Navbar.module.css"],"names":["module","exports","Header","props","useEffect","isAuth","setTasks","userId","className","styles","headerBlock","logo","to","fullName","Navbar","navbarBlock","navbarBlock__link","ToggleProp","toggleBlock","type","checked","task","isImportant","onChange","id","bool","addToImportant","isArchived","addToArchive","instance","axios","baseURL","headers","tasksApi","get","data","post","description","isDone","editMode","taskId","patch","value","delete","usersApi","params","newName","newPassword","initialState","tasks","dispatch","then","res","editTask","removeTask","doneTask","toggleEditMode","connect","state","tasksData","usersData","useState","input","setInput","setProps","where","text","map","item","tasksListBlock","filter","f","t","done","key","valueBlock","task__descr","task__editMode","e","target","onFocus","undefined","onBlur","disabled","btnBlock","onClick","reduxForm","form","addTaskBlock","onSubmit","handleSubmit","formData","taskData","taskDescr","addNewTask","addtTaskForm","Field","inputTask","component","name","placeholder","autoComplete","error","wrongData","addBtn","AddTaskContainer","this","React","Component","Main","MainBlock","ArchivedTasks","archivedTasksBlock","setState","importantTasksBlock","LoginPage","isLogin","setLogin","loginPage","login","Register","register","LogOrChange","Login","loginBlock","registerBlock","setAuthUserData","userData","LoginContainer","r","length","stopSubmit","_error","status","alert","password","logout","App","exact","path","render","Boolean","window","location","hostname","match","combineReducers","formReducer","action","newTask","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.26fe86f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggleBlock\":\"ToggleProp_toggleBlock__TyMf5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__13-VR\",\"LogOrChange\":\"Login_LogOrChange__23P5k\",\"form\":\"Login_form__xuFL8\",\"input\":\"Login_input__1jEsU\",\"wrongData\":\"Login_wrongData__3bnxt\"};","import React, { useEffect } from 'react';\r\nimport styles from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    useEffect(() => {\r\n        if(props.isAuth){\r\n            props.setTasks(props.userId)\r\n        }\r\n    })\r\n    return(\r\n        <div className={styles.headerBlock}>\r\n            <div className={styles.logo}>\r\n                <NavLink to='/' className={styles.logo}>Todo List</NavLink> \r\n            </div>\r\n            { props.isAuth && <p>{ props.fullName }</p> }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react'; \r\nimport styles from './Navbar.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar = (props) => {\r\n    return(\r\n        <div className={styles.navbarBlock}>\r\n            <NavLink className={styles.navbarBlock__link} to='/importantTasks'>Important</NavLink>\r\n            <NavLink className={styles.navbarBlock__link} to='/archivedTasks'>Archive</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport styles from './ToggleProp.module.css'\r\n\r\nconst ToggleProp = (props) => { \r\n    let toggleImportant = (id, bool) => {\r\n        props.addToImportant(props.userId, id, bool) \r\n    }\r\n\r\n    let toggleArchive = (id, bool) => {\r\n        props.addToArchive(props.userId, id, bool) \r\n    }\r\n    return (\r\n        <div className={styles.toggleBlock}>\r\n            <label>\r\n                <input type=\"checkbox\" checked={props.task.isImportant} onChange={() => toggleImportant(props.task.id, !props.task.isImportant)} />\r\n                <span>IMPORTANT</span>\r\n            </label>\r\n            \r\n            <label>\r\n                <input type=\"checkbox\" checked={props.task.isArchived} onChange={() => toggleArchive(props.task.id, !props.task.isArchived)} />\r\n                <span>ARCHIVED</span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleProp;","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:8000/',\r\n    headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\"\r\n    }\r\n})\r\n\r\n\r\nexport const tasksApi = {\r\n    getTasks(userId) { \r\n        return instance.get(`tasks?userId=${userId}`)\r\n    },\r\n    addTask(data) {\r\n        return instance.post(`tasks?userId=${data.userId}`, {\r\n            \"description\": data.description,\r\n            \"isImportant\": data.isImportant,\r\n            \"isArchived\": data.isArchived, \r\n            \"isDone\": data.isDone,\r\n            \"editMode\": data.editMode,\r\n            \"userId\": data.userId\r\n        })\r\n    },\r\n    addToImportant(taskId, bool){ \r\n        return instance.patch(`tasks/${taskId}`, {\r\n            \"isImportant\": bool\r\n        })\r\n    },\r\n    addToArchive(taskId, bool){\r\n        return instance.patch(`tasks/${taskId}`, {\r\n            \"isArchived\": bool\r\n        })\r\n    },\r\n    editTask(taskId, value){\r\n        return instance.patch(`tasks/${taskId}`, {\r\n            \"description\": value\r\n        })\r\n    },\r\n    removeTask(taskId){\r\n        return instance.delete(`tasks/${taskId}`)\r\n    },\r\n    doneTask(taskId, bool){\r\n        return instance.patch(`tasks/${taskId}`, {\r\n            \"isDone\": bool\r\n        })\r\n    },\r\n    toggleEditMode(taskId, bool){\r\n        return instance.patch(`tasks/${taskId}`, {\r\n            \"editMode\": bool\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const usersApi = {\r\n    checkUser(fullName) {\r\n        return instance.get(`users`, { params: { 'fullName': fullName } })\r\n    }, \r\n    register(data){\r\n        return instance.post(`users`, {\r\n            \"fullName\": data.newName,\r\n            \"password\": data.newPassword \r\n        })\r\n    },\r\n    login(userId){\r\n        return instance.get(`users?id=${userId}`)\r\n    }\r\n}\r\n","import { tasksApi } from \"../api/api\"\r\n\r\nlet initialState = {\r\n    tasks: []\r\n}\r\n\r\nexport const tasksReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'SET_TASKS': \r\n            return {\r\n                ...state,\r\n                tasks: [...action.tasks]\r\n            } \r\n        case 'ADD_NEW_TASK': {\r\n            let newTask = {\r\n                ...action.task\r\n            }\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, newTask]    // либо можно этот кейс удалить и при создании нового таска перевызвать SET_TASKS\r\n            } \r\n        } \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n// Actions\r\n\r\nexport const setTasksSuccess = (tasks) => ({\r\n    type: 'SET_TASKS',\r\n    tasks\r\n})\r\n\r\nexport const addNewTaskSuccess = (task) => ({\r\n    type: 'ADD_NEW_TASK',\r\n    task\r\n}) \r\n\r\n// Thunks\r\n\r\nexport const setTasks = (userId) => (dispatch) => {\r\n    tasksApi.getTasks(userId)\r\n        .then(res => {  \r\n            dispatch(setTasksSuccess(res.data));\r\n        })\r\n} \r\n\r\nexport const addNewTask = (data) => (dispatch) => {\r\n        tasksApi.addTask(data)\r\n        .then(res => {\r\n            dispatch(addNewTaskSuccess(res.data));\r\n        })\r\n}\r\n\r\nexport const addToImportant = (userId, taskId, bool) => (dispatch) => { \r\n    tasksApi.addToImportant(taskId, bool)\r\n        .then(res => {  \r\n            dispatch(setTasks(userId)) ;\r\n        })\r\n}\r\n\r\nexport const addToArchive = (userId, taskId, bool) => (dispatch) => {\r\n    tasksApi.addToArchive(taskId, bool)\r\n        .then(res => {\r\n            dispatch(setTasks(userId));\r\n        })\r\n}\r\n\r\nexport const editTask = (userId, taskId, value) => (dispatch) => {\r\n    tasksApi.editTask(taskId, value)\r\n        .then(res => {\r\n            dispatch(setTasks(userId));\r\n        })\r\n}\r\n\r\nexport const removeTask = (taskId, userId) => (dispatch) => {\r\n    tasksApi.removeTask(taskId)\r\n        .then(res => {\r\n            dispatch(setTasks(userId));\r\n        })\r\n}\r\n\r\nexport const doneTask = (taskId, userId, bool) => (dispatch) => {\r\n    tasksApi.doneTask(taskId, bool)\r\n        .then(res => {\r\n            dispatch(setTasks(userId));\r\n        })\r\n}\r\n// FIX: убрать это говно и сделать так чтобы тогглилось локально без запросов на сервер и с правильным рендером\r\nexport const toggleEditMode = (taskId, userId, bool) => (dispatch) => {\r\n    tasksApi.toggleEditMode(taskId, bool)\r\n        .then(res => {\r\n            dispatch(setTasks(userId));\r\n        })\r\n}","import React, { useEffect, useState } from 'react';\r\nimport styles from './TasksList.module.css'; \r\nimport ToggleProp from '../../common/ToggleProp/ToggleProp'; \r\nimport { addToImportant, addToArchive, removeTask, editTask, doneTask, toggleEditMode } from '../../../reducers/tasksReducer';\r\nimport { connect } from 'react-redux'; \r\n\r\nconst TasksList = (props) => {\r\n    let [input, setInput] = useState();\r\n    // TODO: сделать editMode с помощью хуков, убрать editMode с апи\r\n\r\n    let setProps = (where, taskId, text, bool) => { \r\n        props.tasks.map(item => {\r\n            if(item.id === taskId){\r\n                switch(where){\r\n                    case 'onChange':\r\n                        setInput(text);\r\n                        break;\r\n                    case 'onFocus':\r\n                        setInput(item.description);\r\n                        break;\r\n                    case 'editMode': \r\n                        props.toggleEditMode(taskId, props.userId, bool) \r\n                        break;\r\n                }\r\n            }\r\n        })\r\n    }     \r\n   \r\n    let sendUpdatedInput = (taskId) => {\r\n       props.editTask(props.userId, taskId, input)\r\n       setInput('');\r\n    }  \r\n \r\n    return(\r\n        <div className={styles.tasksListBlock}>\r\n            { props.tasks\r\n                    .filter(f => !f.isArchived )\r\n                    .map(t => (\r\n                        <div className={styles.task + ' ' + (t.isDone && styles.done) } key={ t.id } >\r\n                            <div className={styles.valueBlock} >    \r\n                                <input type=\"text\" \r\n                                    className={ styles.task__descr + ' ' + (t.editMode && styles.task__editMode)  }  \r\n                                    value={ t.editMode ? (input || t.description) : t.description }  \r\n                                    onChange={ (e) => {  setProps('onChange', t.id, e.target.value, t.editMode) } } \r\n                                    onFocus={ () => { setProps('onFocus', t.id, undefined, t.editMode) } } \r\n                                    onBlur={ () => { sendUpdatedInput(t.id); setProps('editMode', t.id, undefined, false)} } \r\n                                    disabled={ !t.editMode } /> \r\n\r\n                                <ToggleProp { ...props } task={ t } />\r\n                            </div>\r\n                            \r\n                            <div className={ styles.btnBlock }>\r\n                                <button onClick={ () => props.doneTask(t.id, props.userId, !t.isDone) }>DONE</button>\r\n                                <button onClick={ () => setProps('editMode', t.id, undefined, true) }>EDIT</button>\r\n                                <button onClick={ () => props.removeTask(t.id, props.userId) } >REMOVE</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        </div>    \r\n    )\r\n} \r\n\r\nconst mstp = (state) => {\r\n    return ({\r\n        tasks: state.tasksData.tasks,\r\n        userId: state.usersData.id\r\n    })\r\n}\r\n\r\nexport default connect(mstp, { addToImportant, addToArchive, removeTask, editTask, doneTask, toggleEditMode })(TasksList);","import React from 'react';\r\nimport styles from './AddTask.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nconst AddTask = (props) => { \r\n    const submitTask = (formData) => {   \r\n        let taskData = {  \r\n            description: formData.taskDescr,\r\n            isImportant: formData.isImportant,\r\n            isArchived: false,\r\n            isDone: false,\r\n            editMode: false,\r\n            userId: props.userId \r\n        } \r\n        props.addNewTask(taskData) \r\n        formData.taskDescr = ''\r\n        formData.isImportant = false\r\n    }\r\n    return(\r\n        <div className={styles.addTaskBlock}>\r\n            <form onSubmit={props.handleSubmit(submitTask)} className={styles.addtTaskForm}>\r\n                <Field className={styles.inputTask} component='input' name='taskDescr' type='text' placeholder='What Do You Wanna Do?' autoComplete=\"off\" /> \r\n                <span>\r\n                    <Field className={styles.isImportant} component='input' name='isImportant' type='checkbox' /> \r\n                    Important\r\n                </span>\r\n                { props.error && <div className={styles.wrongData}>{ props.error }</div> }\r\n                <button className={styles.addBtn}>Add</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'addTask'})(AddTask);","import React from 'react'; \r\nimport AddTask from './AddTask';\r\nimport { connect } from 'react-redux';\r\nimport { addNewTask } from '../../../reducers/tasksReducer'\r\n\r\nclass AddTaskContainer extends React.Component {\r\n    render(){\r\n        return <AddTask {...this.props} />\r\n    }\r\n}\r\n\r\nconst mstp = (state) => ({\r\n    tasks: state.tasksData.tasks,\r\n    userId: state.usersData.id\r\n})\r\n\r\nexport default connect(mstp, { addNewTask })(AddTaskContainer);","import React from 'react';\r\nimport styles from './Main.module.css';  \r\nimport TasksList from './TasksList/TasksList';\r\nimport AddTaskContainer from './AddTask/AddTaskContainer'; \r\n\r\n\r\nconst Main = (props) => {\r\n    \r\n    return (\r\n        <div className={styles.MainBlock}>\r\n            <AddTaskContainer />\r\n            <TasksList />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Main;","import React from 'react'; \r\nimport styles from './ArchivedTasks.module.css';\r\nimport { connect } from 'react-redux';\r\nimport ToggleProp from '../common/ToggleProp/ToggleProp';\r\nimport { addToImportant, addToArchive, removeTask } from '../../reducers/tasksReducer';\r\n\r\nclass ArchivedTasks extends React.Component {\r\n    render(){\r\n        return <div className={styles.archivedTasksBlock}>\r\n            { this.props.tasks\r\n                .filter(f => f.isArchived)\r\n                .map(t => (\r\n                        <div className={styles.task} key={t.id}>\r\n                            <div className={ styles.valueBlock }>\r\n                                <input type=\"text\" className={ styles.task__descr } value={ t.description } disabled /> \r\n\r\n                                <ToggleProp {...this.props} task={ t } />\r\n                            </div>\r\n\r\n                            <div className={ styles.btnBlock }>\r\n                                <button onClick={ () => this.setState({ editMode: true }) }>EDIT</button>\r\n                                <button onClick={ () => this.props.removeTask(t.id, this.props.userId) } >REMOVE</button>\r\n                            </div>\r\n                        </div>\r\n                )) \r\n            } \r\n        </div> \r\n    }\r\n}\r\n\r\nlet mstp = (state) => ({\r\n    tasks: state.tasksData.tasks,\r\n    userId: state.usersData.id\r\n})\r\n\r\nexport default connect(mstp, { addToImportant, addToArchive, removeTask })(ArchivedTasks);","import React, { useState }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ImportantTasks.module.css'\r\nimport ToggleProp from '../common/ToggleProp/ToggleProp';\r\nimport { addToImportant, addToArchive, removeTask, editTask, doneTask, toggleEditMode } from '../../reducers/tasksReducer'; \r\n\r\nconst ImportantTasks = (props) => {\r\n    let [input, setInput] = useState();\r\n    // TODO: сделать editMode с помощью хуков, убрать editMode с апи\r\n\r\n    let setProps = (where, taskId, text, bool) => {\r\n        props.tasks.map(item => {\r\n            if (item.id === taskId) {\r\n                switch (where) {\r\n                    case 'onChange':\r\n                        setInput(text);\r\n                        break;\r\n                    case 'onFocus':\r\n                        setInput(item.description);\r\n                        break;\r\n                    case 'editMode':\r\n                        props.toggleEditMode(taskId, props.userId, bool)\r\n                        break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    let sendUpdatedInput = (taskId) => {\r\n        props.editTask(props.userId, taskId, input)\r\n        setInput('');\r\n    }\r\n    return (\r\n        <div className={styles.importantTasksBlock}>\r\n            {props.tasks\r\n                .filter(f => f.isImportant && !f.isArchived)\r\n                .map(t => (\r\n                    <div className={styles.task + ' ' + (t.isDone && styles.done)} key={t.id}>\r\n                        <div className={styles.valueBlock}>\r\n                            <input type=\"text\"\r\n                                className={styles.task__descr + ' ' + (t.editMode && styles.task__editMode)}\r\n                                value={t.editMode ? (input || t.description) : t.description}\r\n                                onChange={(e) => { setProps('onChange', t.id, e.target.value, t.editMode) }}\r\n                                onFocus={() => { setProps('onFocus', t.id, undefined, t.editMode) }}\r\n                                onBlur={() => { sendUpdatedInput(t.id); setProps('editMode', t.id, undefined, false) }}\r\n                                disabled={!t.editMode} />\r\n\r\n                            <ToggleProp {...props} task={t} />\r\n                        </div>\r\n\r\n                        <div className={styles.btnBlock}>\r\n                            <button onClick={ () => props.doneTask(t.id, props.userId, !t.isDone) }>DONE</button>\r\n                            <button onClick={ () => setProps('editMode', t.id, undefined, true) }>EDIT</button>\r\n                            <button onClick={ () => props.removeTask(t.id, props.userId) }>REMOVE</button>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mstp = (state) => ({\r\n    tasks: state.tasksData.tasks,\r\n    userId: state.usersData.id\r\n})\r\n\r\nexport default connect(mstp, { addToImportant, addToArchive, removeTask, editTask, doneTask, toggleEditMode })(ImportantTasks);","import React, { useState } from 'react';\r\nimport styles from './Login.module.css'\r\nimport { reduxForm, Field } from 'redux-form';\r\n\r\nconst LoginPage = (props) => {\r\n    const [isLogin, setLogin] = useState(true)\r\n    return (\r\n        <div className={styles.loginPage}>\r\n            <p>copy repository, install packages, in terminal: <i>'npm run json-run'</i> for run local api and start use</p> \r\n            { isLogin ? <Login login={ props.login } /> : <Register register={ props.register } />}\r\n            <p className={ styles.LogOrChange }>or\r\n                { isLogin\r\n                    ? <span onClick={ () => setLogin(false) } > Register</span>\r\n                    : <span onClick={ () => setLogin(true) }> Login</span>\r\n                }\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\nexport default LoginPage;\r\n\r\n\r\nconst LoginForms = (props) => {\r\n    const goLogin = (formData) => {\r\n        props.login(formData);\r\n    }\r\n    return (\r\n        <div className={styles.loginBlock}>\r\n            <h2>Login</h2>\r\n            <form onSubmit={ props.handleSubmit(goLogin) } className={ styles.form } >\r\n                <Field className={ styles.input } component='input' name='fullName' type='text' placeholder='Your Full Name' />\r\n                <Field className={ styles.input } component='input' name='password' type='password' placeholder='Your Password' />\r\n                <button>Login</button>\r\n                { props.error && <div className={ styles.wrongData }>{ props.error }</div> }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nconst Login = reduxForm({ form: 'login' })(LoginForms)\r\n\r\n\r\nconst RegisterForms = (props) => {\r\n    const goRegister = (formData) => {\r\n        props.register(formData);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.registerBlock}>\r\n            <h2>Register</h2>\r\n            <form onSubmit={props.handleSubmit(goRegister)} className={ styles.form } >\r\n                <Field className={ styles.input } component='input' name='newName' type='text' placeholder='Full Name' />\r\n                <Field className={ styles.input } component='input' name='newPassword' type='password' placeholder='Password' />\r\n                <button>Register</button>\r\n                { props.error && <div className={ styles.wrongData }>{ props.error }</div> }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nconst Register = reduxForm({ form: 'register' })(RegisterForms)","import { stopSubmit } from \"redux-form\";\r\nimport { usersApi } from \"../api/api\";\r\n\r\nlet initialState = { \r\n    isAuth: false\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'SET_AUTH_USER_DATA': \r\n            return {\r\n                ...state,\r\n                ...action.userData,\r\n                isAuth: action.isAuth\r\n            };  \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// TODO: Сделать валидацию для регистрации и логина \r\n\r\nexport const setAuthUserData = (userData, isAuth) => ({\r\n    type: 'SET_AUTH_USER_DATA',\r\n    userData,\r\n    isAuth\r\n}); \r\n\r\nexport const login = (formData) => (dispatch) => { \r\n    usersApi.checkUser(formData.fullName)\r\n        .then(r => {\r\n            if (r.data.length && formData.password === r.data[0].password) {\r\n                usersApi.login(r.data[0].id)\r\n                    .then(res => { \r\n                        dispatch(setAuthUserData(res.data[0], true)); \r\n                    })\r\n            } else {\r\n                dispatch(stopSubmit('login', { _error: 'Неправильный логин или пароль' })); \r\n            };\r\n        })\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    dispatch(setAuthUserData(undefined, false)); \r\n}\r\n\r\nexport const register = (formData) => (dispatch) => {\r\n    usersApi.checkUser(formData.newName)\r\n        .then(r => { \r\n            if (r.data.length > 0) { \r\n                dispatch(stopSubmit('register', { _error: 'Такое имя пользователя уже существует' }));\r\n            } else {\r\n                usersApi.register(formData)\r\n                    .then(r => {\r\n                        if (r.status === 201) {\r\n                            dispatch(setAuthUserData(r.data, true))  \r\n                        } else {\r\n                            alert('Что-то пошло не так')\r\n                        }\r\n                    })\r\n            }\r\n        })\r\n}\r\n\r\n","import React from 'react';\r\nimport LoginPage from './Login';\r\nimport { connect } from 'react-redux';\r\nimport { register, login, logout } from '../../reducers/usersReducer';\r\n\r\nclass LoginContainer extends React.Component{\r\n    render(){\r\n        return <LoginPage { ...this.props } />\r\n    }\r\n} \r\n\r\nconst mstp = (state) => ({\r\n    userData: state.usersData.userData\r\n})\r\n\r\nexport default connect(mstp, { register, login, logout })(LoginContainer);","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Navbar from './components/Navbar/Navbar';\nimport Main from './components/Main/Main'; \nimport { Route } from 'react-router-dom'; \nimport ArchivedTasks from './components/ArchivedTasks/ArchivedTasks';\nimport ImportantTasks from './components/ImportantTasks/ImportantTasks';\nimport { connect } from 'react-redux';\nimport { setTasks } from './reducers/tasksReducer'\nimport LoginContainer from './components/Login/LoginContainer';\n\n// TODO: добавить cookie, чтобы при каждой перезагрузке заново не логиниться\n\nclass App extends React.Component {  \n    render(){\n        return (\n            <div className=\"app\" >\n                <Header isAuth={this.props.isAuth} fullName={this.props.fullName}  userId={this.props.userId} setTasks={this.props.setTasks} />\n                {!this.props.isAuth\n                    ? <LoginContainer />\n                    : <>\n                        <Navbar /> \n                        <div className=\"main\" >\n                                <Route exact path='/' render={() => <Main />}/>\n                                <Route path='/importantTasks' render={() => <ImportantTasks />}/>    \n                                <Route path='/archivedTasks' render={() => <ArchivedTasks />}/>    \n                        </div>\n                    </>\n                }\n                \n            </div>\n        );\n    }\n} \n\nconst mstp = (state) => ({ \n    isAuth: state.usersData.isAuth,\n    userId: state.usersData.id,\n    fullName: state.usersData.fullName\n})\n \nexport default connect(mstp, { setTasks })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { tasksReducer } from \"./tasksReducer\";\r\nimport { usersReducer } from \"./usersReducer\";\r\n\r\n\r\n\r\nexport default combineReducers({\r\n    form: formReducer,\r\n    tasksData: tasksReducer,\r\n    usersData: usersReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom'; \nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from \"redux-thunk\";\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nwindow.store = store;\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<HashRouter>\n\t\t\t<Provider store={store}>\n\t\t\t\t<App />\n\t\t\t</Provider>\n\t\t</HashRouter>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksListBlock\":\"TasksList_tasksListBlock__j8ERD\",\"task\":\"TasksList_task__3nxez\",\"task__descr\":\"TasksList_task__descr__3rrdu\",\"task__editMode\":\"TasksList_task__editMode__3vpxN\",\"valueBlock\":\"TasksList_valueBlock__3ES4T\",\"btnBlock\":\"TasksList_btnBlock__LjIXP\",\"done\":\"TasksList_done__3aSJp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"importantTasksBlock\":\"ImportantTasks_importantTasksBlock__3e1rh\",\"task\":\"ImportantTasks_task__1bso5\",\"task__descr\":\"ImportantTasks_task__descr__1mTTb\",\"task__editMode\":\"ImportantTasks_task__editMode__1oY74\",\"valueBlock\":\"ImportantTasks_valueBlock__1baEd\",\"btnBlock\":\"ImportantTasks_btnBlock__39IG9\",\"done\":\"ImportantTasks_done__KMlyJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addTaskBlock\":\"AddTask_addTaskBlock__xgd3Z\",\"addtTaskForm\":\"AddTask_addtTaskForm__2i8hZ\",\"inputTask\":\"AddTask_inputTask__cv9Xp\",\"isImportant\":\"AddTask_isImportant__18U4G\",\"addBtn\":\"AddTask_addBtn__2fIlw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"archivedTasksBlock\":\"ArchivedTasks_archivedTasksBlock__21BqT\",\"task\":\"ArchivedTasks_task__16Vmq\",\"task__descr\":\"ArchivedTasks_task__descr__3Ax4R\",\"valueBlock\":\"ArchivedTasks_valueBlock__2jMSm\",\"btnBlock\":\"ArchivedTasks_btnBlock__3CV_D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Header_headerBlock__12bW1\",\"logo\":\"Header_logo__2A2GR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarBlock\":\"Navbar_navbarBlock__3rlp0\",\"navbarBlock__link\":\"Navbar_navbarBlock__link__3ugs4\"};"],"sourceRoot":""}